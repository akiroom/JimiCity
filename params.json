{"name":"Jimicity","body":"JimiCity\r\n========\r\n<img src=\"https://github.com/akiroom/JimiCity/raw/master/screenshot.png\">\r\n\r\nSimCityっぽい感じのJavaアプリケーションです。\r\n\r\n慶應義塾大学湘南藤沢キャンパス\r\n2010年春学期「オブジェクト指向プログラミング」という授業の\r\n最終課題として製作した、都市シミュレーターです。\r\nシティセンター効果などのシミュレーションを行い、\r\nある程度自然な都市が生成されるようになっています。\r\n授業で指定された学校専用ライブラリを使用しています。\r\n**ライブラリが足りずにコンパイルできないはずなので、t07013ha.jarを実行してください。**\r\n\r\nライセンス\r\n---------\r\n© Hiroki Akiyama http://akiroom.com/ All rights reserved.\r\n\r\n私的な利用の範囲を超えて利用する場合は著作権者の許諾を必要とするものとします。\r\n\r\n作者または著作権者は、契約行為、不法行為、またはそれ以外であろうと、ソフトウェアに起因または関連し、あるいはソフトウェアの使用またはその他の扱いによって生じる一切の請求、損害、その他の義務について何らの責任も負わないものとします。 \r\n\r\n提出したレポート\r\n---------------\r\n最終課題提出当時のレポートの一部を、Markdown記法に変更して転載します。\r\n\r\n### 概要\r\n地味な街並みを眺めて楽しむ、「JimiCity」を開発しました。\r\n\r\n### 使い方\r\n起動してながめることが目的のゲームです。キーボードのキーを押すと、それぞれのインタラクションを楽しむことができます。\r\n\r\n* [↑][→][↓][←]\r\n\t* それぞれの方向へ画面の表示領域を移動します\r\n* [スペース]\r\n\t* シティセンターの地価を高騰させます\r\n* [B]\r\n\t* シティセンターに不況の嵐を巻き起こします\r\n* [W]\r\n\t* 標準的な街の景況へリセットします\r\n* [R]\r\n\t* 一部の地域を区画整理します\r\n* [/]\r\n\t* 街の発展アルゴリズムをシティセンター方式かランダム方式に切り換えます。\r\n* [Q]\r\n\t* 違う街へ行きます（都市をリセットします）\r\n\r\n### 評価してほしい点（努力した点）\r\n#### 斜め視点を綺麗に表示していること\r\n初めてSimCityのようなゲームを作るにあたって、最初は初代SimCityのように縦横に直角に交わるグリッド表示を考えていたのですが、どうしてもSimCity2000以降の、斜め見下ろし型の画面にしたかったので、苦戦して斜め視点の画面表示を実現しました。\r\n\r\nゲームらしいゲームを作った事がなく、ノウハウがまったくなかったのですが、グリッド表示を作ってから順番にずらして少しずつ試行錯誤を繰り返して、ようやく実現できました。おそらくpres2の履歴を見ていただければ試行錯誤が分かると思います。\r\n\r\n#### 再帰を用いてそれっぽい道路を生成\r\n当初の予定では直線のみの道路を自動生成しようと考えていたのですが、Ｌ字カーブやＴ字路を用意したいと考え、再帰処理を使って任意の点から道路を伸ばしていくことで、日本の道路にありがちな変なルートの道路をつくることができました。\r\n\r\n\r\n#### アルゴリズムを工夫して市街地や郊外を再現\r\n最初に本システムが一段落ついた時は、ランダムに街を表示していたため高層ビルの横に一戸建て住宅があるような不自然な街並みでした。以前、SimCityでは「シティーセンター」という概念をとりいれていると聞いていたことを思い出し、街の中心地を設定してそこからどんどん低層なビルが並ぶようにプログラムを書き換えたところ、本物の街のような街並みがつくれました。起動中に[／]キーを押すことで、製作初期のランダムな街並みアルゴリズムへと切り替えることができます。\r\n\r\n#### 多態性を利用してソースコードの可読性を確保\r\n街並の１タイルごとのタイルをすべて、抽象クラスであるTileクラスから継承し、各タイルに抽象メソッドsetRandomImage()を実行することで、そのタイルがビルでも道路でも、条件分岐せずに画像をセットできるようにしました。\r\n\r\n#### 標準ライブラリを再実装（ただし、正しいプログラミングとは言えない）\r\n関数の戻り値にX,Y座標を返せるPointクラスを使いたかったのですが、チェックシートでは使用が禁止されていたため、自分でつくりました。\r\n\r\n#### ドット絵を全部自分で描いた\r\n\r\nSimCity2000のデータを勝手に使おうかと考えたのですが、せっかく作ったプログラムを著作権の都合で公開できないのは時間が無駄になってしまうと考え、すべてのドット絵を一から新しく描きました。結果としてちょっと下手な感じのシステムになっていますが、絶対に誰も見たことが無い街をお見せすることができるので、よかったかな、と考えています。\r\n\r\n#### 軽量化に悩んだ\r\n大量の画像を動かす上、オブプロの独自仕様ライブラリでは画像のキャッシュができないようだったので、軽量化に頭を悩ませました。普段使っている潤沢なライブラリを使えず、基本中の基本をやるしかなかったのですが、結果として多少高速なシステムができたと思います。\r\n\r\n具体的には、以下の点を工夫しました\r\n* 縦横２倍にしたドット絵で画面サイズ中の計算量を減らす\r\n* 1枚あたり9KBのpngファイルを使っていたが、\r\n  1枚あたり50KBぐらいあるGIFファイルに切り替えた\r\n  (ファイルサイズが大きくなったがGIFファイルの方が描画が速かった)\r\n* 再描画フラグを用意してループ中の再描画を極力減らした\r\n* 当初は全部描き換えていたが、表示中の場所のみを再描画するようにした\r\n\r\n### 感想\r\n制限の厳しいオブプロのライブラリのみという環境のもと、まったく開発経験のない斜め見下ろし型のゲーム画面開発という体験は、かなりハードなものでした。しかし、徐々に街ができていく感覚は、SimCityのそれとは違ったものがあり、とても楽しかったです。\r\n\r\n心残りな点は、教育上の理由とはいえ指定以外のライブラリの使用が禁止されている点です。例えば禁止されているjava.awt.Colorや数々のGUIライブラリをそのまま使えたら本格的に応用的なゲームをつくることもできるかもしれません。実際に授業外でもつくってみようかな、と思いました。\r\n\r\nColorクラスについては、BCanvasクラスのdrawTextメソッドを使う際に使いたかったので、実装を探し出して継承してColorクラスのもつ数値型を取り出す部分を置き換えようとしたのですが、実装部を見つけることができず、泣く泣くdrawTextの引数にnullを指定して白色のみを使いました。\r\n","tagline":"SimCityっぽい感じのJavaアプリケーションです。","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}